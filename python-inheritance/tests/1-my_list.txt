>>> MyList = __import__('1-my_list').MyList

# ðŸ”¹ Test 1 : Liste avec des nombres en dÃ©sordre
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(5)
>>> my_list.append(4)

>>> print(my_list)  # Affiche la liste originale
[3, 1, 2, 5, 4]

>>> my_list.print_sorted()  # Affiche la liste triÃ©e sans la modifier
[1, 2, 3, 4, 5]

>>> print(my_list)  # VÃ©rifie que la liste originale est intacte
[3, 1, 2, 5, 4]

# ðŸ”¹ Test 2 : Liste vide
>>> empty_list = MyList()
>>> print(empty_list)  # VÃ©rifie qu'elle est vide
[]

>>> empty_list.print_sorted()  # VÃ©rifie que Ã§a ne plante pas
[]

# ðŸ”¹ Test 3 : Liste dÃ©jÃ  triÃ©e
>>> sorted_list = MyList()
>>> sorted_list.append(1)
>>> sorted_list.append(2)
>>> sorted_list.append(3)
>>> sorted_list.append(4)
>>> sorted_list.append(5)

>>> print(sorted_list)  # Affiche la liste dÃ©jÃ  triÃ©e
[1, 2, 3, 4, 5]

>>> sorted_list.print_sorted()  # VÃ©rifie que Ã§a reste triÃ©
[1, 2, 3, 4, 5]

>>> print(sorted_list)  # VÃ©rifie que l'originale n'a pas changÃ©
[1, 2, 3, 4, 5]

# ðŸ”¹ Test 4 : Liste avec des doublons
>>> duplicate_list = MyList()
>>> duplicate_list.append(4)
>>> duplicate_list.append(2)
>>> duplicate_list.append(2)
>>> duplicate_list.append(3)
>>> duplicate_list.append(1)

>>> print(duplicate_list)  # Affiche la liste originale
[4, 2, 2, 3, 1]

>>> duplicate_list.print_sorted()  # VÃ©rifie que les doublons sont bien triÃ©s
[1, 2, 2, 3, 4]

>>> print(duplicate_list)  # VÃ©rifie que la liste originale est intacte
[4, 2, 2, 3, 1]
